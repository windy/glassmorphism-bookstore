class ApplicationController < ActionController::Base
  # Authentication methods generated by authentication generator
  before_action :set_current_request_details

  helper_method :current_user, :user_signed_in?
  # Authentication public methods generated end

  # Only allow modern browsers supporting webp images, web push, badges, import maps, CSS nesting, and CSS :has.
  allow_browser versions: :modern
  
  include MissingTemplateFallbackConcern
  include FriendlyErrorHandlingConcern
  include DevelopmentCsrfBypassConcern


  # Authentication private methods begin
  private

  def current_user
    Current.session&.user
  end
  
  def user_signed_in?
    current_user.present?
  end

  def authenticate_user!
    if session_record = find_session_record
      Current.session = session_record
    else
      respond_to do |format|
        format.html { redirect_to sign_in_path }
        format.json { render json: { error: "Authentication required" }, status: :unauthorized }
      end
    end
  end

  alias_method :authenticate, :authenticate_user!

  def set_current_request_details
    Current.user_agent = request.user_agent
    Current.ip_address = request.ip

    if session_record = find_session_record
      Current.session = session_record
    end
  end

  def find_session_record
    # Try cookie-based authentication first
    if cookies.signed[:session_token].present?
      return Session.find_by_id(cookies.signed[:session_token])
    end

    # Try Authorization header authentication
    if request.headers['Authorization'].present?
      token = request.headers['Authorization'].gsub(/Bearer +/, '')
      return Session.find_by_id(token)
    end

    nil
  end

  def handle_password_errors(user)
    error_messages = []

    user.errors.each do |error|
      case error.attribute
      when :current_password
        error_messages << "Current password is incorrect"
      when :password
        if error.type == :too_short
          error_messages << "New password must be at least #{User::MIN_PASSWORD} characters long"
        elsif error.type == :invalid
          error_messages << "Password format is invalid"
        else
          error_messages << "New password: #{error.message}"
        end
      when :password_confirmation
        error_messages << "Password confirmation doesn't match"
      when :password_digest
        error_messages << "Password format is invalid"
      end
    end

    if error_messages.empty?
      error_messages = user.errors.full_messages
    end

    return error_messages.first
  end

  # Just used by registeration/authentication controller
  def _strong_root_path
    respond_to?(:root_path) ? root_path : '/'
  end
  # Authentication private methods end
end

